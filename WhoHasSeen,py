import tableauserverclient as TSC

# Define your Tableau server connection details
TABLEAU_SERVER_URL = 'https://uat.insights.citigroup.net'
SITE_ID = 'GCT'
WORKBOOK_ID = '93cba8db-8e70-483e-a666-010117f086c6'
VIEW_ID = '30b0b00b-4bfa-4e03-bc8e-9a1da19833e0'
PAT_NAME = "API_Call" # Replace with the name you created
PAT_SECRET = "sDCBtBCCQwiD2Kg0ZvVPxQ==:7fcZtHwkz6VwQtLZ0MwwRMgaXKvkAeJ4" # Replace with the secret you saved

# Use PAT for authentication
tableau_auth = TSC.PersonalAccessTokenAuth(PAT_NAME, PAT_SECRET, site_id=SITE_ID)
server = TSC.Server(TABLEAU_SERVER_URL, use_server_version=True)
server.version = '3.1'  # Specify the API version
server.add_http_options({'verify': False})  # For UAT SSL certs

try:
    print(f"Signing in to site '{SITE_ID}' on {TABLEAU_SERVER_URL}...")
    with server.auth.sign_in(tableau_auth):
        print("Sign in successful.")

        # Log the workbook ID being used
        print(f"Attempting to retrieve workbook with ID: {WORKBOOK_ID}")

        # List all workbooks to verify the workbook ID
        # all_workbooks, pagination_item = server.workbooks.get()
        # print("List of all workbooks:")
        # for workbook in all_workbooks:
        #     print(f"Workbook ID: {workbook.id}, Name: {workbook.name}")

    
        # Get the workbook by ID
        workbook = server.workbooks.get_by_id(WORKBOOK_ID)
        print(f"Workbook found: {workbook.name}")

        # Populate the views for the workbook
        server.workbooks.populate_views(workbook)

        print("List of dashboards:")
        for view in workbook.views:
            print(f"View ID: {view.id}, Name: {view.name}, URL: {view.content_url}, Owner: {view.owner_id}")

        # Get the specific view by ID
        specific_view = server.views.get_by_id(VIEW_ID)
        print(f"Specific View - Name: {specific_view.name}, URL: {specific_view.content_url}, Owner: {specific_view.owner_id}")




except TSC.ServerResponseError as e:
    print(f"An error occurred: {e}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
------------------------------
import tableauserverclient as TSC
import json
import csv

# ... [Keep your existing connection details here] ...

try:
    print(f"Signing in to site '{SITE_ID}' on {TABLEAU_SERVER_URL}...")
    with server.auth.sign_in(tableau_auth):
        print("Sign in successful.")

        # ... [Keep your existing workbook/view retrieval code] ...

        # Get usage statistics for the view
        actual_site_id = server.auth.site_id
        url = f"{server.baseurl}/api/{server.version}/sites/{actual_site_id}/views/{VIEW_ID}/usage"
        print(f"Requesting view usage data from: {url}")

        headers = {'Accept': 'application/json'}
        response = server._session.get(url, headers=headers)
        response.raise_for_status()
        usage_data = response.json()

        # Print raw JSON for inspection (optional)
        # print(json.dumps(usage_data, indent=2))

        # Convert to CSV
        csv_filename = 'view_usage.csv'
        with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
            if 'usage' in usage_data and len(usage_data['usage']) > 0:
                fieldnames = ['user_name', 'last_viewed', 'total_views']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for event in usage_data['usage']:
                    user_info = event.get('user', {})
                    writer.writerow({
                        'user_name': user_info.get('name', 'Unknown'),
                        'last_viewed': event.get('lastViewedAt', ''),
                        'total_views': event.get('totalViews', 0)
                    })
                print(f"Successfully exported {len(usage_data['usage'])} records to {csv_filename}")
            else:
                print("No usage data found.")

except TSC.ServerResponseError as e:
    print(f"Tableau API error: {e}")
except Exception as e:
    print(f"General error: {e}")
--------------------------

import tableauserverclient as TSC
import csv

# Configuration
TABLEAU_SERVER_URL = 'https://uat.insights/sss.net'
SITE_ID = 'GCT'
VIEW_ID = '30b0b00b-4bfa-4e03-bc8e-9a1da19833e0'
PAT_NAME = "API_Call"
PAT_SECRET = "sXXXXXXXXXXXXXXXXXXXZ0MwXXXXXXXXXXXXXXX4"

# Set up authentication
tableau_auth = TSC.PersonalAccessTokenAuth(
    PAT_NAME,
    PAT_SECRET,
    site_id=SITE_ID
)

server = TSC.Server(TABLEAU_SERVER_URL, use_server_version=True)
server.add_http_options({'verify': False})  # Only for testing environments

try:
    print(f"Signing in to {TABLEAU_SERVER_URL}...")
    with server.auth.sign_in(tableau_auth):
        print("Authentication successful")

        # Get the view reference
        view = server.views.get_by_id(VIEW_ID)
        print(f"Accessing view: {view.name}")

        # Get view usage statistics
        usage_endpoint = f"views/{VIEW_ID}/usage"
        response = server._session.get(
            url=server.baseurl + usage_endpoint,
            headers={'Accept': 'application/json'}
        )
        response.raise_for_status()
        
        usage_data = response.json().get('usage', [])
        print(f"Found {len(usage_data)} usage records")

        # Prepare CSV output
        csv_file = 'view_usage_report.csv'
        with open(csv_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            # Write header
            writer.writerow([
                'User Name', 
                'User Email', 
                'Last Viewed', 
                'Total Views'
            ])
            
            # Write data rows
            for entry in usage_data:
                writer.writerow([
                    entry.get('user', {}).get('name', 'N/A'),
                    entry.get('user', {}).get('email', 'N/A'),
                    entry.get('lastViewedAt', 'N/A'),
                    entry.get('totalViews', 0)
                ])
        
        print(f"Successfully exported data to {csv_file}")

except TSC.ServerResponseError as e:
    print(f"Tableau API Error: {e}")
except Exception as e:
    print(f"General Error: {e}")
finally:
    if 'server' in locals() and server.auth.is_signed_in():
        server.auth.sign_out()
        print("Logged out from Tableau Server")

---------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tableau Visualization</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
    <style>
        .tab {
            display: inline-block;
            padding: 10px;
            cursor: pointer;
            background-color: #f1f1f1;
            border: 1px solid #ccc;
            margin-right: 5px;
        }
        .tab.active {
            background-color: #ccc;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <div>
        <div class="tab" id="prod-tab">PROD</div>
        <div class="tab" id="uat-tab">UAT</div>
    </div>
    <div id="prod-content" class="tab-content">
        <tableau-viz id='tableau-viz-prod' src='https://insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?' width='1000' height='863' toolbar='bottom'></tableau-viz>
        <button id="save-prod-data">Save PROD Data</button>
    </div>
    <div id="uat-content" class="tab-content">
        <tableau-viz id='tableau-viz-uat' src='https://uat.insights.citigroup.net/vizql/showadminview/views/WhoHasSeen?' width='1000' height='863' toolbar='bottom'></tableau-viz>
        <button id="save-uat-data">Save UAT Data</button>
    </div>

    <script type='module' src='https://insights.citigroup.net/javascripts/api/tableau.embedding.3.latest.min.js'></script>
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const prodTab = document.getElementById('prod-tab');
            const uatTab = document.getElementById('uat-tab');
            const prodContent = document.getElementById('prod-content');
            const uatContent = document.getElementById('uat-content');

            prodTab.addEventListener('click', function() {
                prodTab.classList.add('active');
                uatTab.classList.remove('active');
                prodContent.classList.add('active');
                uatContent.classList.remove('active');
            });

            uatTab.addEventListener('click', function() {
                uatTab.classList.add('active');
                prodTab.classList.remove('active');
                uatContent.classList.add('active');
                prodContent.classList.remove('active');
            });

            // Initialize Tableau visualizations
            const prodVizElement = document.getElementById('tableau-viz-prod');
            const prodVizUrl = prodVizElement.getAttribute('src');
            const prodViz = new tableau.Viz(prodVizElement, prodVizUrl, { hideTabs: true });

            const uatVizElement = document.getElementById('tableau-viz-uat');
            const uatVizUrl = uatVizElement.getAttribute('src');
            const uatViz = new tableau.Viz(uatVizElement, uatVizUrl, { hideTabs: true });

            // Set initial active tab
            prodTab.click();

            // Function to save data to Excel
            function saveDataToExcel(viz, fileName) {
                console.log("Saving data to Excel for:", fileName);
                const workbook = viz.getWorkbook();
                const activeSheet = workbook.getActiveSheet();
                activeSheet.getSummaryDataAsync().then(function(t) {
                    const data = t.getData();
                    const columns = t.getColumns();
                    
                    // Prepare data for Excel
                    const excelData = [];
                    const headers = columns.map(col => col.getFieldName());
                    excelData.push(headers);

                    data.forEach(row => {
                        const rowData = row.map(cell => cell.formattedValue);
                        excelData.push(rowData);
                    });

                    console.log("Excel data prepared:", excelData);

                    // Create a new workbook and add the data
                    const wb = XLSX.utils.book_new();
                    const ws = XLSX.utils.aoa_to_sheet(excelData);
                    XLSX.utils.book_append_sheet(wb, ws, "Sheet1");

                    // Save the workbook
                    XLSX.writeFile(wb, fileName);
                    console.log("File saved:", fileName);
                }).catch(function(error) {
                    console.error("Error getting summary data:", error);
                });
            }

            // Event listeners for saving data
            document.getElementById('save-prod-data').addEventListener('click', function() {
                saveDataToExcel(prodViz, "prod_data.xlsx");
            });

            document.getElementById('save-uat-data').addEventListener('click', function() {
                saveDataToExcel(uatViz, "uat_data.xlsx");
            });
        });
    </script>
</body>
</html>