import tableauserverclient as TSC

# Define your Tableau server connection details
TABLEAU_SERVER_URL = 'https://uat.insights.citigroup.net'
SITE_ID = 'GCT'
WORKBOOK_ID = '93cba8db-8e70-483e-a666-010117f086c6'
VIEW_ID = '30b0b00b-4bfa-4e03-bc8e-9a1da19833e0'
PAT_NAME = "API_Call" # Replace with the name you created
PAT_SECRET = "sDCBtBCCQwiD2Kg0ZvVPxQ==:7fcZtHwkz6VwQtLZ0MwwRMgaXKvkAeJ4" # Replace with the secret you saved

# Use PAT for authentication
tableau_auth = TSC.PersonalAccessTokenAuth(PAT_NAME, PAT_SECRET, site_id=SITE_ID)
server = TSC.Server(TABLEAU_SERVER_URL, use_server_version=True)
server.version = '3.1'  # Specify the API version
server.add_http_options({'verify': False})  # For UAT SSL certs

try:
    print(f"Signing in to site '{SITE_ID}' on {TABLEAU_SERVER_URL}...")
    with server.auth.sign_in(tableau_auth):
        print("Sign in successful.")

        # Log the workbook ID being used
        print(f"Attempting to retrieve workbook with ID: {WORKBOOK_ID}")

        # List all workbooks to verify the workbook ID
        # all_workbooks, pagination_item = server.workbooks.get()
        # print("List of all workbooks:")
        # for workbook in all_workbooks:
        #     print(f"Workbook ID: {workbook.id}, Name: {workbook.name}")

    
        # Get the workbook by ID
        workbook = server.workbooks.get_by_id(WORKBOOK_ID)
        print(f"Workbook found: {workbook.name}")

        # Populate the views for the workbook
        server.workbooks.populate_views(workbook)

        print("List of dashboards:")
        for view in workbook.views:
            print(f"View ID: {view.id}, Name: {view.name}, URL: {view.content_url}, Owner: {view.owner_id}")

        # Get the specific view by ID
        specific_view = server.views.get_by_id(VIEW_ID)
        print(f"Specific View - Name: {specific_view.name}, URL: {specific_view.content_url}, Owner: {specific_view.owner_id}")




except TSC.ServerResponseError as e:
    print(f"An error occurred: {e}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")
------------------------------
import tableauserverclient as TSC
import json
import csv

# ... [Keep your existing connection details here] ...

try:
    print(f"Signing in to site '{SITE_ID}' on {TABLEAU_SERVER_URL}...")
    with server.auth.sign_in(tableau_auth):
        print("Sign in successful.")

        # ... [Keep your existing workbook/view retrieval code] ...

        # Get usage statistics for the view
        actual_site_id = server.auth.site_id
        url = f"{server.baseurl}/api/{server.version}/sites/{actual_site_id}/views/{VIEW_ID}/usage"
        print(f"Requesting view usage data from: {url}")

        headers = {'Accept': 'application/json'}
        response = server._session.get(url, headers=headers)
        response.raise_for_status()
        usage_data = response.json()

        # Print raw JSON for inspection (optional)
        # print(json.dumps(usage_data, indent=2))

        # Convert to CSV
        csv_filename = 'view_usage.csv'
        with open(csv_filename, 'w', newline='', encoding='utf-8') as csvfile:
            if 'usage' in usage_data and len(usage_data['usage']) > 0:
                fieldnames = ['user_name', 'last_viewed', 'total_views']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for event in usage_data['usage']:
                    user_info = event.get('user', {})
                    writer.writerow({
                        'user_name': user_info.get('name', 'Unknown'),
                        'last_viewed': event.get('lastViewedAt', ''),
                        'total_views': event.get('totalViews', 0)
                    })
                print(f"Successfully exported {len(usage_data['usage'])} records to {csv_filename}")
            else:
                print("No usage data found.")

except TSC.ServerResponseError as e:
    print(f"Tableau API error: {e}")
except Exception as e:
    print(f"General error: {e}")
--------------------------

import requests
from bs4 import BeautifulSoup
import csv

# Configuration - REPLACE WITH YOUR ACTUAL CREDENTIALS
TABLEAU_URL = 'https://uat.insights.citigroup.net'
VIEW_URL = '/vizql/showadminview/views/WhoHasSeen?view_id=30900'
USERNAME = 'your_username'
PASSWORD = 'your_password'

# Create a session to maintain cookies
session = requests.Session()

# 1. First get the login page to obtain the authenticity token
login_url = f'{TABLEAU_URL}/views/WhoHasSeen?view_id=30900'
response = session.get(login_url)
soup = BeautifulSoup(response.text, 'html.parser')

# 2. Perform login (this is Tableau-specific authentication flow)
auth_data = {
    'username': USERNAME,
    'password': PASSWORD,
    'rememberMe': 'false'
}

login_response = session.post(f'{TABLEAU_URL}/auth/login', data=auth_data)
if 'error' in login_response.text:
    raise Exception("Login failed")

# 3. Access the protected view
view_response = session.get(f'{TABLEAU_URL}{VIEW_URL}')

# 4. Parse the data (this will depend on the actual page structure)
soup = BeautifulSoup(view_response.text, 'html.parser')
table = soup.find('table', {'class': 'tab-widget'})  # Update class based on actual page

# 5. Extract and save data
if table:
    headers = [th.text.strip() for th in table.find_all('th')]
    rows = []
    
    for row in table.find_all('tr'):
        cols = row.find_all('td')
        if cols:
            rows.append([col.text.strip() for col in cols])
    
    with open('tableau_data.csv', 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(headers)
        writer.writerows(rows)
    print("Data saved successfully")
else:
    print("No table found on the page")
